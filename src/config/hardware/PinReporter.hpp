#pragma once

#include "config/hardware/PinValidator.hpp"
#include "config/unified/ConfigurationFactory.hpp"
#include <Arduino.h>

/**
 * @brief G√©n√©rateur de rapport d'utilisation des pins √† la compilation
 *
 * Utilise le PinValidator pour g√©n√©rer automatiquement un rapport
 * lors du d√©marrage du syst√®me ou √† la demande.
 */
class PinReporter {
public:
    /**
     * @brief G√©n√®re et affiche le rapport complet d'utilisation des pins
     *
     * Cette fonction doit √™tre appel√©e au d√©marrage pour v√©rifier
     * la configuration et afficher le rapport en mode debug.
     */
    static void generateStartupReport() {
        Serial.println(F("\n========================================"));
        Serial.println(F("   MIDI STUDIO PIN CONFIGURATION"));
        Serial.println(F("========================================"));

        // Cr√©er la configuration par d√©faut
        auto config = ConfigurationFactory::createDefaultConfiguration();

        // Valider et g√©n√©rer le rapport
        bool isValid = PinValidator::validateAndReport(*config);

        if (!isValid) {
            Serial.println(F("\n‚ö†Ô∏è  CRITICAL ERROR: Pin conflicts detected!"));
            Serial.println(F("‚ö†Ô∏è  Please check the pin assignments above."));
            Serial.println(F("‚ö†Ô∏è  System may not function correctly."));

            // En cas de conflit critique, on peut d√©cider d'arr√™ter le syst√®me
#ifdef HALT_ON_PIN_CONFLICT
            Serial.println(F("\nüõë SYSTEM HALTED due to pin conflicts"));
            while (1) {
                // Faire clignoter la LED pour indiquer l'erreur
                digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
                delay(500);
            }
#endif
        } else {
            Serial.println(F("\n‚úÖ Pin configuration validated successfully"));
        }

        Serial.println(F("========================================\n"));
    }

    /**
     * @brief V√©rifie une pin sp√©cifique et retourne son utilisation
     */
    static std::string checkPin(uint8_t pin) {
        auto& registry = PinRegistry::getInstance();

        // R√©initialiser et reconstruire le registre
        registry.clear();
        auto config = ConfigurationFactory::createDefaultConfiguration();
        PinValidator::validateAndReport(*config);

        // G√©n√©rer un rapport simple pour cette pin
        return registry.generateReport(); // Pour l'instant retourne tout
    }

    /**
     * @brief Active/d√©sactive l'affichage automatique du rapport au d√©marrage
     */
    static void setAutoReportEnabled(bool enabled) {
        autoReportEnabled_ = enabled;
    }

    /**
     * @brief V√©rifie si le rapport automatique est activ√©
     */
    static bool isAutoReportEnabled() {
        return autoReportEnabled_;
    }

private:
    static bool autoReportEnabled_;
};

// Initialisation de la variable statique
bool PinReporter::autoReportEnabled_ = true; // Activ√© par d√©faut en debug

/**
 * @brief Macro pour faciliter l'appel du rapport au d√©marrage
 *
 * √Ä utiliser dans setup() de votre main.cpp :
 * ```cpp
 * void setup() {
 *     Serial.begin(115200);
 *     REPORT_PIN_CONFIGURATION();
 *     // ... reste de l'initialisation
 * }
 * ```
 */
#ifdef DEBUG_BUILD
    #define REPORT_PIN_CONFIGURATION() PinReporter::generateStartupReport()
#else
    // En release, ne g√©n√®re le rapport que s'il y a des conflits
    #define REPORT_PIN_CONFIGURATION() \
        do { \
            auto config = ConfigurationFactory::createDefaultConfiguration(); \
            if (!PinValidator::validateAndReport(*config)) { \
                PinReporter::generateStartupReport(); \
            } \
        } while(0)
#endif

/**
 * @brief Macro pour validation stricte √† la compilation
 *
 * Utiliser dans un fichier source pour forcer la v√©rification :
 * ```cpp
 * ENFORCE_PIN_VALIDATION();
 * ```
 */
#define ENFORCE_PIN_VALIDATION() VALIDATE_PIN_CONFIGURATION()