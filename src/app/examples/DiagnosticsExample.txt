/*
 * Exemple d'utilisation des diagnostics basés sur les événements
 * 
 * Ce fichier montre comment intégrer les diagnostics événementiels
 * dans différentes parties de votre application.
 */

// ------------------------------------------------------------
// Exemple d'utilisation dans un gestionnaire d'encodeurs
// ------------------------------------------------------------

void EncoderManager::onEncoderValueChanged(int encoderId, int newValue, int delta) {
    // Traitement normal de l'événement
    processEncoderChange(encoderId, newValue, delta);
    
    // Déclenchement des diagnostics avec le nom de l'événement
    DIAG_ON_EVENT("Encodeur changé");
}

// ------------------------------------------------------------
// Exemple d'utilisation dans un gestionnaire de boutons
// ------------------------------------------------------------

void ButtonManager::onButtonPressed(int buttonId) {
    // Traitement normal de l'événement
    processButtonPress(buttonId);
    
    // Déclenchement des diagnostics pour le bouton spécifique
    char eventName[32];
    snprintf(eventName, sizeof(eventName), "Bouton %d pressé", buttonId);
    DIAG_ON_EVENT(eventName);
}

// ------------------------------------------------------------
// Exemple d'utilisation dans le traitement MIDI
// ------------------------------------------------------------

void MidiSystem::handleNoteOn(uint8_t channel, uint8_t note, uint8_t velocity) {
    // Traitement normal du message MIDI
    processNoteOn(channel, note, velocity);
    
    // Déclenchement des diagnostics pour les événements importants
    if (isImportantNote(note)) {
        char eventName[32];
        snprintf(eventName, sizeof(eventName), "MIDI Note %d (ch.%d)", note, channel);
        DIAG_ON_EVENT(eventName);
    }
}

// ------------------------------------------------------------
// Exemple d'utilisation dans un changement d'interface utilisateur
// ------------------------------------------------------------

void UIController::changeMode(UIMode newMode) {
    UIMode oldMode = currentMode;
    currentMode = newMode;
    
    // Traitement normal du changement de mode
    updateDisplay();
    
    // Déclenchement des diagnostics lors d'un changement de mode
    char eventName[64];
    snprintf(eventName, sizeof(eventName), "UI: %s -> %s", 
             getModeName(oldMode), getModeName(newMode));
    DIAG_ON_EVENT(eventName);
}

// ------------------------------------------------------------
// Comment l'activer ou le désactiver depuis d'autres parties du code
// ------------------------------------------------------------

// Désactiver temporairement pour des sections critiques
void criticalOperation() {
    // Désactiver les diagnostics événementiels pour éviter de ralentir
    DiagnosticsManager::enableEventDiagnostics(false);
    
    // Effectuer l'opération critique
    performCpuIntensiveTask();
    
    // Réactiver les diagnostics
    DiagnosticsManager::enableEventDiagnostics(true);
}

// Ou via une commande du moniteur série (déjà disponible):
// > event off
// > event on